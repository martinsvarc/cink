generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  username         String         @unique
  avatarUrl        String?
  email            String?        @unique
  role             String
  status           String         @default("active")
  passwordHash     String
  lastLogin        DateTime?
  viewOnlyAssigned Boolean        @default(true)
  createdAt        DateTime       @default(now())
  chatter          Chatter?
  notifications    Notification[]
}

model Chatter {
  id                      String              @id @default(cuid())
  userId                  String              @unique
  hourlyRate              Int
  defaultCommission       Float
  milestoneTiers          Json
  weekendBonusMultiplier  Float
  wildcardBonusMultiplier Float
  isActive                Boolean             @default(true)
  user                    User                @relation(fields: [userId], references: [id])
  assignedClients         Client[]            @relation("AssignedClients")
  commissionRules         CommissionRule[]
  goals                   Goal[]
  modelChannels           ModelChannel[]
  payments                Payment[]
  performance             PerformanceMetric[]
  transactions            Transaction[]       @relation("ChatterTransactions")
  workSessions            WorkSession[]
}

model Model {
  id              String              @id @default(cuid())
  name            String
  platform        String
  channelHandle   String?
  adSpend         Int?
  commissionRate  Float?
  status          String
  campaigns       AdCampaign[]
  commissionRules CommissionRule[]
  channels        ModelChannel[]
  persona         ModelPersona?
  payments        Payment[]
  performance     PerformanceMetric[]
}

model ModelPersona {
  id           String   @id @default(cuid())
  modelId      String   @unique
  description  String?
  tags         String[]
  statusNote   String?
  lastEditedBy String?
  updatedAt    DateTime @updatedAt
  model        Model    @relation(fields: [modelId], references: [id])
}

model ModelChannel {
  id          String   @id @default(cuid())
  modelId     String
  platform    String
  channelName String
  chatterId   String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  chatter     Chatter? @relation(fields: [chatterId], references: [id])
  model       Model    @relation(fields: [modelId], references: [id])
}

model Client {
  id                    String        @id @default(cuid())
  name                  String
  notes                 String?       @db.Text
  profileUrl            String?
  payday                Int?
  channel               String?
  statusIndicator       String?       @default("active")
  priorityScore         Int?          @default(5)
  assignedChatterId     String?
  assignedChatter       Chatter?      @relation("AssignedClients", fields: [assignedChatterId], references: [id])
  tags                  ClientTag[]
  payments              Payment[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  socialHandle          String?
  socialPlatform        String?
  caseNotes             String?       @db.Text
  lastContactDate       DateTime?
  nextFollowUpDate      DateTime?
  valueScore            Int?          @default(0)
  conversionRate        Float?        @default(0.0)
  averageOrderValue     Float?        @default(0.0)
  lifetimeValue         Float?        @default(0.0)
  sourceChannel         String?
  acquisitionCost       Float?        @default(0.0)
  customerSegment       String?
  engagement            String?       @default("low")
  riskLevel             String?       @default("low")
  customFields          Json?
  internalId            String?       @unique
}

model ClientTag {
  id        String   @id @default(cuid())
  clientId  String
  label     String
  createdAt DateTime @default(now())
  score     Int?
  client    Client   @relation(fields: [clientId], references: [id])
}

model Account {
  id               String        @id @default(cuid())
  name             String        @unique
  type             String
  balance          Int           @default(0)
  currency         String        @default("CZK")
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  transactionsFrom Transaction[] @relation("FromAccount")
  transactionsTo   Transaction[] @relation("ToAccount")
}

model Payment {
  id                String       @id @default(cuid())
  amount            Int
  chatterId         String
  modelId           String
  clientId          String
  channel           String
  category          String
  timestamp         DateTime     @default(now())
  notes             String?
  toAccount         String?
  source            String?
  cinklo            Boolean      @default(false)
  hotovo            Boolean      @default(false)
  screenshot        String?
  workSessionId     String?
  dailyVolumeAtTime Int?
  commissionEarned  Int?
  commissionRate    Float?
  thresholdMet      Boolean      @default(false)
  cinkoProcessedAt  DateTime?
  hotovoProcessedAt DateTime?
  activity          ActivityLog?
  chatter           Chatter      @relation(fields: [chatterId], references: [id])
  client            Client       @relation(fields: [clientId], references: [id])
  model             Model        @relation(fields: [modelId], references: [id])
  workSession       WorkSession? @relation(fields: [workSessionId], references: [id])
  transaction       Transaction?
}

model Goal {
  id             String   @id @default(cuid())
  chatterId      String
  targetAmount   Int
  commissionRate Float
  date           DateTime
  goalType       String   @default("daily")
  metricType     String   @default("volume")
  isActive       Boolean  @default(true)
  chatter        Chatter  @relation(fields: [chatterId], references: [id])

  @@unique([chatterId, date])
}

model PerformanceGoal {
  id                  String   @id @default(cuid())
  period              String   @unique
  chattingRevenueGoal Int
  profitGoal          Int
  enabled             Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Transaction {
  id            String   @id @default(cuid())
  paymentId     String?  @unique
  type          String
  amount        Int
  fromAccountId String?
  toAccountId   String?
  timestamp     DateTime @default(now())
  method        String?
  note          String?
  operatorId    String?
  fromAccount   Account? @relation("FromAccount", fields: [fromAccountId], references: [id])
  chatter       Chatter? @relation("ChatterTransactions", fields: [operatorId], references: [id])
  payment       Payment? @relation(fields: [paymentId], references: [id])
  toAccount     Account? @relation("ToAccount", fields: [toAccountId], references: [id])
}

model CommissionRule {
  id         String   @id @default(cuid())
  chatterId  String
  modelId    String?
  category   String?
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  chatter    Chatter  @relation(fields: [chatterId], references: [id])
  model      Model?   @relation(fields: [modelId], references: [id])

  @@unique([chatterId, modelId, category])
}

model ActivityLog {
  id         String   @id @default(cuid())
  paymentId  String   @unique
  createdBy  String
  actionType String
  timestamp  DateTime @default(now())
  details    Json?
  payment    Payment  @relation(fields: [paymentId], references: [id])
}

model PerformanceMetric {
  id          String   @id @default(cuid())
  chatterId   String?
  modelId     String?
  date        DateTime
  totalMade   Int
  totalCost   Int
  hoursWorked Int
  createdAt   DateTime @default(now())
  chatter     Chatter? @relation(fields: [chatterId], references: [id])
  model       Model?   @relation(fields: [modelId], references: [id])

  @@unique([chatterId, modelId, date])
}

model AdCampaign {
  id              String   @id @default(cuid())
  modelId         String
  spend           Int
  return          Int
  responseTime    Int
  newFollowers    Int
  newSubscribers  Int
  lostSubscribers Int
  roi             Float
  date            DateTime
  createdAt       DateTime @default(now())
  model           Model    @relation(fields: [modelId], references: [id])
}

model WorkSession {
  id                 String    @id @default(cuid())
  chatterId          String
  startTime          DateTime
  endTime            DateTime?
  durationMinutes    Int?
  calculatedEarnings Int?
  milestoneBonus     Int?
  totalCommission    Int?
  status             String    @default("active")
  autoStoppedAt      DateTime?
  createdAt          DateTime  @default(now())
  payments           Payment[]
  chatter            Chatter   @relation(fields: [chatterId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String
  type      String
  userId    String
  metadata  Json?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}
